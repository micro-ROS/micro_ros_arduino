
#include <stdio.h>
#include <stdbool.h>
#include <sys/time.h>

int clock_gettime(clockid_t unused, struct timespec *tp)
{
  (void) unused;
  uint64_t m = drv_micros();
  tp->tv_sec = m / 1000000;
  tp->tv_nsec = (m % 1000000) * 1000;
  return 0;
}

bool arduino_transport_open(struct uxrCustomTransport * transport)
{
    // Place here your initialization platform code
    // Return true if success
    while(!vcp_is_connected()){}
    return vcp_is_connected();
}

bool arduino_transport_close(struct uxrCustomTransport * transport)
{
    return true;
}

size_t arduino_transport_write(struct uxrCustomTransport * transport, uint8_t* buf, size_t len, uint8_t* errcode)
{
    (void) errcode;
    return  vcp_write(buf, len);;
}

size_t arduino_transport_read(struct uxrCustomTransport * transport, uint8_t* buf, size_t len, int timeout, uint8_t* errcode)
{
    (void) errcode;
    uint32_t start_time = drv_micros() * 1000;
    size_t readed = 0;

    while((readed < len) && (((drv_micros()*1000) - start_time) < (uint32_t) timeout)){
      while((readed < len) && vcp_is_available()){
        buf[readed++] = vcp_getch();
      }
    }
    
    return readed;
}