
#include <stdio.h>
#include <stdbool.h>
#include <sys/time.h>

int clock_gettime(clockid_t unused, struct timespec *tp)
{
  (void) unused;
  uint64_t m = drv_micros();
  tp->tv_sec = m / 1000000;
  tp->tv_nsec = (m % 1000000) * 1000;
  return 0;
}

bool arduino_serial_platform_open()
{
    // Place here your initialization platform code
    // Return true if success
    return vcp_is_connected();
}

bool arduino_serial_platform_close()
{
    // Place here your closing platform code
    // Return true if success
    return true;

}

size_t arduino_serial_platform_write(uint8_t* buf, size_t len, uint8_t* errcode)
{
    // Place here your writing bytes platform code
    // Return number of bytes written
    (void) errcode;
    for(size_t i = 0; i < len; i++){
      vcp_putch(buf[i]);
      while( vcp_is_transmitted() == 0 );
    }
    
    return len;
}

size_t arduino_serial_platform_read(uint8_t* buf, size_t len, int timeout, uint8_t* errcode)
{
    // Place here your reading bytes platform code
    // Return number of bytes read (max bytes: len)
    (void) errcode;
    uint32_t start_time = drv_micros() * 1000;
    size_t readed = 0;

    while(((drv_micros()*1000) - start_time) < (uint32_t) timeout){
      while(vcp_is_available()){
        buf[readed++] = vcp_getch();
      }
    }
    
    return readed;
}